{"version":3,"sources":["constants/mainForm.js","components/NavBar/NavBar.js","constants/app.js","components/PatientDetails/PatientDetails.js","components/MultiValueLabel/MultiValueLabel.js","components/SelectServices/SelectServices.js","components/MenuDiagnoses/MenuDiagnoses.js","components/SelectDiagnoses/SelectDiagnoses.js","api/index.js","constants/api.js","components/DoctorsAppointment/DoctorsAppointment.js","components/MainForm/MainForm.js","db/base.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["SERVICES_FIELD","REPEAT_TEXT_INPUTS","GENDER_LIST","value","label","COUT_DAYS","USA_STATES","NavBar","_ref","toggle","tabPosition","react_default","a","createElement","Nav","tabs","NavItem","NavLink","className","classnames","active","onClick","T","propTypes","func","isRequired","string","INITIAL_STATE","patients","ERROR_LABEL","SUCCES_LABEL","TIMEOUT_MESSAGE","PatientDetails","props","_useState","useState","patientName","ssn","patientAddress","patientCity","patientZip","patientPhone","dobPatient","dobHolder","accidentDate","stateAccident","holderName","policyNumber","holderAddress","holderCity","holderZip","holderPhone","_useState2","Object","slicedToArray","textInputs","setTextInputs","_useState3","_useState4","patientState","setPatientState","_useState5","_useState6","holderState","setHolderState","_useState7","_useState8","insuranceName","setInsuranceName","_useState9","_useState10","gender","setGender","_useState11","_useState12","genderHolder","setGenderHolder","_useState13","_useState14","relastionship","setRelastionship","_useState15","_useState16","isSameHolder","setSameHolder","_useState17","_useState18","isEmployment","setEmployment","_useState19","_useState20","isAutoAccident","setAutoAccident","_useState21","_useState22","isOtherAccident","setOtherAccident","addPatient","showMesseageSuccess","showMesseageFill","checkPatientName","handleTextInputChange","event","persist","objectSpread","defineProperty","target","name","includes","Form","onSubmit","preventDefault","newPatient","Row","form","Col","md","FormGroup","Label","Input","placeholder","onChange","required","react_select_browser_esm","options","window","insuranceList","e","defaultValue","type","disabled","check","checked","isDisabled","relationshipList","for","CustomInput","id","bsSize","Button","color","size","PropTypes","MultiValueLabel","updateCountServices","patientInfo","data","defaultProps","isOpen","setToggle","quantity","setQuantity","_id","chunk_5d200a41_browser_esm","Tooltip","placement","autohide","services","checkVaild","changedServices","map","service","patient","SelectServices","updateServices","servicesList","react","isMulti","classNamePrefix","closeMenuOnSelect","hideSelectedOptions","components","MultiValueLabel_MultiValueLabel","backspaceRemovesValue","MenuDiagnoses","optionSelectedLength","getValue","length","Menu","children","style","margin","SelectDiagnoses","changeDiagnoses","diagnosesList","diagnoses","MenuDiagnoses_MenuDiagnoses","newLineMapping","0","1","2","3","4","5","loadFile","url","callback","JSZipUtils","getBinaryContent","renderData","content","zip","JSZip","doc","docxtemplater","loadZip","setOptions","nullGetter","setData","render","error","getZip","generate","generateEmptyLine","countLines","result","countLine","j","push","calculateSum","sum","forEach","element","parseFloat","priceView","toFixed","getRemainDiagnoses","remain","slice","join","getDiagnosesList","indexElement","concat","getDoctorFormat","doctor","npi","signature","getServicesTemplate","toConsumableArray","number","undefined","find","elem","pfx","price","getOfficeFormat","office","indexSub","search","of_1","substr","of_2","DoctorsAppointment","idPatient","setIdPatient","maxDay","setMaxDay","currentDay","setCurrentDay","pages","setPages","setDoctor","officeAddress","setOfficeAddress","dateReceipt","setDateReceipt","doctorList","officeAddressList","updatePatient","selectPatientList","patientsList","entries","_ref4","_ref5","val","getSelectedPatients","newPage","listPages","process","page","servicesMain","filter","index","insertData","hasGen","hasG","hasH","hasEmp","hasEmpp","hasOth","hasAu","hasA","moment","format","sum_","dv","Date","now","hasSela","hasSpouse","hasChild","hasOther","servicesRemain","docx","DocxMerger","dateTimeCreate","outputName","save","saveAs","generateFile","list","values","patientId","_i","_Object$entries","_ref3","_ref2","key","JSON","stringify","getPatientIdByValue","SelectDiagnoses_SelectDiagnoses","SelectServices_SelectServices","MainForm","activeTab","handleToggle","NavBar_NavBar","TabContent","TabPane","tabId","sm","DoctorsAppointment_DoctorsAppointment_DoctorsAppointment","PatientDetails_PatientDetails_PatientDetails","app","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","base","Rebase","createClass","database","App","state","patientData","_this","setState","prevState","_objectSpread2","message","NotificationManager","success","field","selectedPatient","this","patientsRef","syncState","context","Container","MainForm_MainForm_MainForm","lib","Component","Boolean","location","hostname","match","ReactDOM","App_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qdAUaA,EAAiB,WAwEjBC,EAAqB,CAChC,cACA,iBACA,cACA,aACA,eACA,cAGWC,EAAc,CACzB,CAAEC,MAAO,IAAKC,MAAO,QACrB,CAAED,MAAO,IAAKC,MAAO,WAGVC,EAAY,CACvB,CAAEF,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,EAAGC,MAAO,KACnB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,MACpB,CAAED,MAAO,GAAIC,MAAO,OAGTE,EAAa,CACxB,CACEH,MAAO,UACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,uBACPC,MAAO,MAET,CACED,MAAO,iCACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,mBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,gBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,gBACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,2BACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,SACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,cACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,eACPC,MAAO,MAET,CACED,MAAO,YACPC,MAAO,MAET,CACED,MAAO,QACPC,MAAO,MAET,CACED,MAAO,OACPC,MAAO,MAET,CACED,MAAO,UACPC,MAAO,MAET,CACED,MAAO,iBACPC,MAAO,MAET,CACED,MAAO,WACPC,MAAO,MAET,CACED,MAAO,aACPC,MAAO,MAET,CACED,MAAO,gBACPC,MAAO,M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","file":"static/js/main.1c0f129c.chunk.js","sourcesContent":["// MAIN FORM\nexport const DATE_FORMAT = 'MMDDYYYY'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_MESSAGE = 'Please, fill in all fields!'\nexport const SUCCES_MESSAGE = 'Done'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\nexport const FIRST_NAV_TAB = '1'\nexport const SECOND_NAV_TAB = '2'\nexport const SERVICES_FIELD = 'services'\nexport const DIAGNOSES_FIELD = 'diagnoses'\nexport const TABLE_NAME = 'patients'\nexport const MAX_DAY = 25\nexport const MIN_DAY = 1\n\n//DoctorsAppointment\n\nexport const INITIAL_STATE_DOCTORS_APPOINTMENT = {\n  patientName: '',\n  officeAddress: '',\n  doctorName: '',\n  doctorValue: {},\n  isPatientSelected: true,\n  dateReceipt: null,\n}\n\nexport const getPatientByName = (list, name) => {\n  return Object.values(list).find(patient => {\n    return patient.patientName === name\n  })\n}\n\nexport const getPatientIdByValue = (list, value) => {\n  for (let [key, val] of Object.entries(list)) {\n    if (JSON.stringify(val) === JSON.stringify(value)) {\n      return key\n    }\n  }\n}\n\nexport const getSelectedPatients = patientsList => {\n  const selectPatientList = []\n  Object.entries(patientsList).map(([key, val]) => {\n    return selectPatientList.push({\n      value: val.patientName,\n      label: val.patientName,\n    })\n  })\n  return selectPatientList\n}\n\n// PATIENT DETAILS\nexport const INITIAL_STATE_PATIENT = {\n  patientName: '',\n  ssn: '',\n  addressPatient: '',\n  city: 'Jacksonville',\n  state: 'FL',\n  zip: '',\n  phoneNumber: '',\n  dob: null,\n  accidentDate: null,\n  gender: '',\n  insuranceHolder: '',\n  phoneNumberHolder: '',\n  zipHolder: '',\n  cityHolder: 'Jacksonville',\n  stateHolder: 'FL',\n  addressHolder: '',\n  isSameHolder: true,\n  policyNumber: '',\n  diagnoses: [],\n  services: [],\n  relastionship: '',\n  isEmployment: false,\n  isAutoAccident: true,\n  isOtherAccident: false,\n  insurance: '',\n  stateAccident: 'FL',\n}\n\nexport const REPEAT_TEXT_INPUTS = [\n  'patientName',\n  'patientAddress',\n  'patientCity',\n  'patientZip',\n  'patientPhone',\n  'dobPatient',\n]\n\nexport const GENDER_LIST = [\n  { value: 'm', label: 'male' },\n  { value: 'f', label: 'female' },\n]\n\nexport const COUT_DAYS = [\n  { value: 1, label: '1' },\n  { value: 2, label: '2' },\n  { value: 3, label: '3' },\n  { value: 4, label: '4' },\n  { value: 5, label: '5' },\n  { value: 6, label: '6' },\n  { value: 7, label: '7' },\n  { value: 8, label: '8' },\n  { value: 9, label: '9' },\n  { value: 10, label: '10' },\n  { value: 11, label: '11' },\n  { value: 12, label: '12' },\n  { value: 13, label: '13' },\n  { value: 14, label: '14' },\n  { value: 15, label: '15' },\n  { value: 16, label: '16' },\n  { value: 17, label: '17' },\n  { value: 18, label: '18' },\n  { value: 19, label: '19' },\n  { value: 20, label: '20' },\n  { value: 21, label: '21' },\n  { value: 22, label: '22' },\n  { value: 23, label: '23' },\n  { value: 24, label: '24' },\n  { value: 25, label: '25' },\n]\n\nexport const USA_STATES = [\n  {\n    value: 'Alabama',\n    label: 'AL',\n  },\n  {\n    value: 'Alaska',\n    label: 'AK',\n  },\n  {\n    value: 'American Samoa',\n    label: 'AS',\n  },\n  {\n    value: 'Arizona',\n    label: 'AZ',\n  },\n  {\n    value: 'Arkansas',\n    label: 'AR',\n  },\n  {\n    value: 'California',\n    label: 'CA',\n  },\n  {\n    value: 'Colorado',\n    label: 'CO',\n  },\n  {\n    value: 'Connecticut',\n    label: 'CT',\n  },\n  {\n    value: 'Delaware',\n    label: 'DE',\n  },\n  {\n    value: 'District Of Columbia',\n    label: 'DC',\n  },\n  {\n    value: 'Federated States Of Micronesia',\n    label: 'FM',\n  },\n  {\n    value: 'Florida',\n    label: 'FL',\n  },\n  {\n    value: 'Georgia',\n    label: 'GA',\n  },\n  {\n    value: 'Guam',\n    label: 'GU',\n  },\n  {\n    value: 'Hawaii',\n    label: 'HI',\n  },\n  {\n    value: 'Idaho',\n    label: 'ID',\n  },\n  {\n    value: 'Illinois',\n    label: 'IL',\n  },\n  {\n    value: 'Indiana',\n    label: 'IN',\n  },\n  {\n    value: 'Iowa',\n    label: 'IA',\n  },\n  {\n    value: 'Kansas',\n    label: 'KS',\n  },\n  {\n    value: 'Kentucky',\n    label: 'KY',\n  },\n  {\n    value: 'Louisiana',\n    label: 'LA',\n  },\n  {\n    value: 'Maine',\n    label: 'ME',\n  },\n  {\n    value: 'Marshall Islands',\n    label: 'MH',\n  },\n  {\n    value: 'Maryland',\n    label: 'MD',\n  },\n  {\n    value: 'Massachusetts',\n    label: 'MA',\n  },\n  {\n    value: 'Michigan',\n    label: 'MI',\n  },\n  {\n    value: 'Minnesota',\n    label: 'MN',\n  },\n  {\n    value: 'Mississippi',\n    label: 'MS',\n  },\n  {\n    value: 'Missouri',\n    label: 'MO',\n  },\n  {\n    value: 'Montana',\n    label: 'MT',\n  },\n  {\n    value: 'Nebraska',\n    label: 'NE',\n  },\n  {\n    value: 'Nevada',\n    label: 'NV',\n  },\n  {\n    value: 'New Hampshire',\n    label: 'NH',\n  },\n  {\n    value: 'New Jersey',\n    label: 'NJ',\n  },\n  {\n    value: 'New Mexico',\n    label: 'NM',\n  },\n  {\n    value: 'New York',\n    label: 'NY',\n  },\n  {\n    value: 'North Carolina',\n    label: 'NC',\n  },\n  {\n    value: 'North Dakota',\n    label: 'ND',\n  },\n  {\n    value: 'Northern Mariana Islands',\n    label: 'MP',\n  },\n  {\n    value: 'Ohio',\n    label: 'OH',\n  },\n  {\n    value: 'Oklahoma',\n    label: 'OK',\n  },\n  {\n    value: 'Oregon',\n    label: 'OR',\n  },\n  {\n    value: 'Palau',\n    label: 'PW',\n  },\n  {\n    value: 'Pennsylvania',\n    label: 'PA',\n  },\n  {\n    value: 'Puerto Rico',\n    label: 'PR',\n  },\n  {\n    value: 'Rhode Island',\n    label: 'RI',\n  },\n  {\n    value: 'South Carolina',\n    label: 'SC',\n  },\n  {\n    value: 'South Dakota',\n    label: 'SD',\n  },\n  {\n    value: 'Tennessee',\n    label: 'TN',\n  },\n  {\n    value: 'Texas',\n    label: 'TX',\n  },\n  {\n    value: 'Utah',\n    label: 'UT',\n  },\n  {\n    value: 'Vermont',\n    label: 'VT',\n  },\n  {\n    value: 'Virgin Islands',\n    label: 'VI',\n  },\n  {\n    value: 'Virginia',\n    label: 'VA',\n  },\n  {\n    value: 'Washington',\n    label: 'WA',\n  },\n  {\n    value: 'West Virginia',\n    label: 'WV',\n  },\n  {\n    value: 'Wisconsin',\n    label: 'WI',\n  },\n  {\n    value: 'Wyoming',\n    label: 'WY',\n  },\n]\n","import React from 'react'\nimport T from 'prop-types'\n\nimport classnames from 'classnames'\n\nimport { Nav, NavItem, NavLink } from 'reactstrap'\n\nexport { FIRST_NAV_TAB, SECOND_NAV_TAB } from '../../constants/mainForm'\n\nconst FIRST_NAV_TAB = '1' // DO EXPORT\nconst SECOND_NAV_TAB = '2' // DO EXPORT\n\nconst NavBar = ({ toggle, tabPosition }) => {\n  return (\n    <Nav tabs>\n      <NavItem>\n        <NavLink\n          className={classnames({\n            active: tabPosition === FIRST_NAV_TAB,\n          })}\n          onClick={() => toggle(FIRST_NAV_TAB)}\n        >\n          Doctor's Appointment\n        </NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink\n          className={classnames({\n            active: tabPosition === SECOND_NAV_TAB,\n          })}\n          onClick={() => toggle(SECOND_NAV_TAB)}\n        >\n          Patient Details\n        </NavLink>\n      </NavItem>\n    </Nav>\n  )\n}\n\nT.propTypes = {\n  toggle: T.func.isRequired,\n  tabPosition: T.string.isRequired,\n}\n\nexport { NavBar }\n","export const INITIAL_STATE = {\n  patients: {},\n}\nexport const PATIENTS_TABLE = 'patients'\nexport const ERROR_LABEL = 'Error message'\nexport const ERROR_FILL = 'Please, fill in all fields!'\nexport const SUCCES_ADD_PATIENT = 'You add new patient'\nexport const ERROR_EXIST = 'A patient with that name exists'\nexport const SUCCES_LABEL = 'Success'\nexport const SUCCES_GENERATION = 'Generation'\nexport const TIMEOUT_MESSAGE = 3000\n","import React, { useState } from 'react'\nimport T from 'prop-types'\n\nimport Select from 'react-select'\n\nimport {\n  Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Col,\n  Row,\n  CustomInput,\n} from 'reactstrap'\n\nimport {\n  GENDER_LIST,\n  USA_STATES,\n  REPEAT_TEXT_INPUTS,\n} from '@/constants/mainForm'\nimport { ERROR_FILL, SUCCES_ADD_PATIENT, ERROR_EXIST } from '@/constants/app'\n\nimport './PatientDetails.scss'\n\nconst PatientDetails = props => {\n  const [textInputs, setTextInputs] = useState({\n    patientName: '',\n    ssn: '',\n    patientAddress: '',\n    patientCity: 'Jacksonville',\n    patientZip: '',\n    patientPhone: '',\n    dobPatient: null,\n    dobHolder: '',\n    accidentDate: null,\n    stateAccident: 'FL',\n    holderName: '',\n    policyNumber: '',\n    holderAddress: '',\n    holderCity: 'Jacksonville',\n    holderZip: '',\n    holderPhone: '',\n  })\n  const [patientState, setPatientState] = useState('FL')\n  const [holderState, setHolderState] = useState('FL')\n  const [insuranceName, setInsuranceName] = useState('')\n  const [gender, setGender] = useState('')\n  const [genderHolder, setGenderHolder] = useState('')\n  const [relastionship, setRelastionship] = useState('')\n  const [isSameHolder, setSameHolder] = useState(true)\n  const [isEmployment, setEmployment] = useState(false)\n  const [isAutoAccident, setAutoAccident] = useState(true)\n  const [isOtherAccident, setOtherAccident] = useState(false)\n\n  const {\n    addPatient,\n    showMesseageSuccess,\n    showMesseageFill,\n    checkPatientName,\n  } = props\n\n  const handleTextInputChange = event => {\n    event.persist()\n    setTextInputs(textInputs => ({\n      ...textInputs,\n      [event.target.name]: event.target.value,\n    }))\n\n    if (isSameHolder && REPEAT_TEXT_INPUTS.includes(event.target.name)) {\n      switch (event.target.name) {\n        case 'patientName':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderName: event.target.value,\n          }))\n          break\n\n        case 'patientAddress':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderAddress: event.target.value,\n          }))\n          break\n\n        case 'patientCity':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderCity: event.target.value,\n          }))\n          break\n\n        case 'patientZip':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderZip: event.target.value,\n          }))\n          break\n\n        case 'patientPhone':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            holderPhone: event.target.value,\n          }))\n          break\n\n        case 'dobPatient':\n          setTextInputs(textInputs => ({\n            ...textInputs,\n            dobHolder: event.target.value,\n          }))\n          break\n\n        default:\n          break\n      }\n    }\n  }\n\n  const checkValid = () => {\n    return (\n      patientState &&\n      holderState &&\n      insuranceName &&\n      gender &&\n      genderHolder &&\n      relastionship\n    )\n  }\n\n  const onSubmitForm = event => {\n    event.preventDefault()\n    if (checkValid()) {\n      if (!checkPatientName(textInputs.patientName)) {\n        const newPatient = {\n          ...textInputs,\n          patientState: patientState,\n          holderState: holderState,\n          insuranceName: insuranceName,\n          gender: gender,\n          genderHolder: genderHolder,\n          relastionship: relastionship,\n          isSameHolder: isSameHolder,\n          isEmployment: isEmployment,\n          isAutoAccident: isAutoAccident,\n          isOtherAccident: isOtherAccident,\n        }\n        addPatient(newPatient)\n        showMesseageSuccess(SUCCES_ADD_PATIENT)\n      } else {\n        showMesseageFill(ERROR_EXIST)\n      }\n    } else {\n      showMesseageFill(ERROR_FILL)\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <Row className=\"input-label\" form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Full name patient:</Label>\n            <Input\n              name=\"patientName\"\n              placeholder=\"full name patient...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>Social Security Number (SSN):</Label>\n            <Input\n              name=\"ssn\"\n              placeholder=\"ssn...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Insurance name:</Label>\n            <Select\n              name=\"insuranceName\"\n              placeholder=\"...\"\n              options={window.insuranceList}\n              onChange={e => setInsuranceName(e.value)}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <FormGroup>\n        <Label>Address patient:</Label>\n        <Input\n          name=\"patientAddress\"\n          placeholder=\"address patient...\"\n          onChange={handleTextInputChange}\n          required\n        />\n      </FormGroup>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>City:</Label>\n            <Input\n              name=\"patientCity\"\n              placeholder=\"city patient...\"\n              onChange={handleTextInputChange}\n              defaultValue=\"Jacksonville\"\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>State:</Label>\n            <Select\n              placeholder=\"state patient...\"\n              options={USA_STATES}\n              onChange={e => setPatientState(e.label)}\n              defaultValue={{\n                value: 'Florida',\n                label: 'FL',\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Zip:</Label>\n            <Input\n              name=\"patientZip\"\n              placeholder=\"zip patient...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Phone number:</Label>\n            <Input\n              name=\"patientPhone\"\n              placeholder=\"phone number...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>Date of Birth:</Label>\n            <Input\n              name=\"dobPatient\"\n              type=\"date\"\n              placeholder=\"date of birth...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Gender:</Label>\n            <Select\n              placeholder=\"gender...\"\n              options={GENDER_LIST}\n              onChange={e => setGender(e.label)}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row className=\"line\" form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Full name insurance holder:</Label>\n            <Input\n              name=\"holderName\"\n              placeholder=\"full name insurance holder...\"\n              value={textInputs.holderName}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n            <Label check className=\"check-box\">\n              <Input\n                type=\"checkbox\"\n                checked={isSameHolder}\n                onChange={() => setSameHolder(!isSameHolder)}\n              />{' '}\n              the name of the insurer matches the name of the patient\n            </Label>\n          </FormGroup>\n        </Col>\n        <Col md={3}>\n          <FormGroup>\n            <Label>Gender:</Label>\n            <Select\n              placeholder=\"gender...\"\n              options={GENDER_LIST}\n              onChange={e => setGenderHolder(e.label)}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={3}>\n          <FormGroup>\n            <Label>Palicy Number:</Label>\n            <Input\n              name=\"policyNumber\"\n              placeholder=\"palicy number...\"\n              onChange={handleTextInputChange}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Address:</Label>\n            <Input\n              name=\"holderAddress\"\n              placeholder=\"address holder...\"\n              value={textInputs.holderAddress}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={3}>\n          <FormGroup>\n            <Label>Date of Birth:</Label>\n            <Input\n              type=\"date\"\n              name=\"dobHolder\"\n              value={textInputs.dobHolder}\n              disabled={isSameHolder}\n              placeholder=\"date of birth...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={3}>\n          <FormGroup>\n            <Label>Phone number:</Label>\n            <Input\n              name=\"holderPhone\"\n              placeholder=\"phone number...\"\n              value={textInputs.holderPhone}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>City:</Label>\n            <Input\n              name=\"holderCity\"\n              placeholder=\"city holder...\"\n              value={textInputs.holderCity}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={4}>\n          <FormGroup>\n            <Label>State:</Label>\n            <Select\n              placeholder=\"state holder...\"\n              options={USA_STATES}\n              onChange={e => setHolderState(e.label)}\n              isDisabled={isSameHolder}\n              defaultValue={{\n                value: 'Florida',\n                label: 'FL',\n              }}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={2}>\n          <FormGroup>\n            <Label>Zip:</Label>\n            <Input\n              name=\"holderZip\"\n              placeholder=\"zip holder...\"\n              value={textInputs.holderZip}\n              disabled={isSameHolder}\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row className=\"line\" form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Patient to relationship to insured:</Label>\n            <Select\n              placeholder=\"...\"\n              options={window.relationshipList}\n              onChange={e => setRelastionship(e.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>Accident date:</Label>\n            <Input\n              name=\"accidentDate\"\n              type=\"date\"\n              placeholder=\"accident date...\"\n              onChange={handleTextInputChange}\n              required\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label for=\"exampleCheckbox\">\n              Is patients condition related to:\n            </Label>\n            <div>\n              <CustomInput\n                type=\"switch\"\n                id=\"employment\"\n                label=\"EMPLOYMENT? (Courrent or Previous)\"\n                onChange={() => {\n                  setEmployment(!isEmployment)\n                }}\n                checked={isEmployment}\n              />\n              <Row>\n                <Col md={3}>\n                  <CustomInput\n                    type=\"switch\"\n                    id=\"auto\"\n                    label=\"AUTO ACCIDENT?\"\n                    onChange={() => {\n                      setAutoAccident(!isAutoAccident)\n                    }}\n                    checked={isAutoAccident}\n                  />\n                </Col>\n                <Col className=\"inputState\" md={2}>\n                  State:\n                  <Input\n                    name=\"stateAccident\"\n                    bsSize=\"sm\"\n                    defaultValue=\"FL\"\n                    required\n                    onChange={handleTextInputChange}\n                  />\n                </Col>\n              </Row>\n              <CustomInput\n                type=\"switch\"\n                id=\"other\"\n                label=\"OTHER ACCIDENT?\"\n                checked={isOtherAccident}\n                onChange={() => {\n                  setOtherAccident(!isOtherAccident)\n                }}\n              />\n            </div>\n          </FormGroup>\n        </Col>\n      </Row>\n      <Button color=\"secondary\" size=\"lg\">\n        Add\n      </Button>\n    </Form>\n  )\n}\n\nT.PropTypes = {\n  addPatient: T.func.isRequired,\n  showMesseageSuccess: T.func.isRequired,\n  showMesseageFill: T.func.isRequired,\n  checkPatientName: T.func.isRequired,\n}\n\nexport { PatientDetails }\n","import React, { useState } from 'react'\nimport T from 'prop-types'\n\nimport { Tooltip, Label } from 'reactstrap'\nimport { components } from 'react-select'\n\nimport { SERVICES_FIELD } from '@/constants/mainForm'\n\nconst MultiValueLabel = props => {\n  const { updateCountServices, patientInfo } = props\n  const { data } = props.defaultProps\n\n  const [isOpen, setToggle] = useState(false)\n  const [quantity, setQuantity] = useState(data.quantity)\n\n  const handleToggle = () => {\n    if (isOpen) {\n      setQuantity(data.quantity)\n    }\n    setToggle(!isOpen)\n  }\n\n  const checkVaild = value =>\n    value === '1/2' || value === '0.5' || value === '1' || value === '2'\n\n  const handleInput = ({ target: { value } }) => {\n    const { id, services } = patientInfo\n\n    if (checkVaild(value)) {\n      const changedServices = services.map(service => {\n        if (service._id === data._id) {\n          return { ...service, quantity: value }\n        } else {\n          return service\n        }\n      })\n      setQuantity(value)\n      updateCountServices(id, changedServices, SERVICES_FIELD)\n    } else {\n      setQuantity(value)\n    }\n  }\n\n  return (\n    <div id={data._id}>\n      <components.MultiValueLabel {...props.defaultProps} />\n      <Tooltip\n        placement=\"top\"\n        isOpen={isOpen}\n        autohide={false}\n        target={data._id}\n        toggle={handleToggle}\n      >\n        <Label for=\"quantitySelect\">Quantity:</Label>\n        <input id=\"quantitySelect\" onChange={handleInput} value={quantity} />\n      </Tooltip>\n    </div>\n  )\n}\n\nT.defaultProps = {\n  patient: {\n    id: '',\n    services: [],\n  },\n}\n\nT.PropTypes = {\n  updateCountServices: T.func.isRequired,\n  patientInfo: T.Object,\n}\n\nexport { MultiValueLabel }\n","import React, { Fragment } from 'react'\nimport T from 'prop-types'\n\nimport Select from 'react-select'\nimport { Label } from 'reactstrap'\n\nimport { MultiValueLabel } from '@/components/MultiValueLabel'\n\nconst SelectServices = ({ updateServices, onChange, patient }) => {\n  const options = window.servicesList\n\n  return (\n    <Fragment>\n      <Label>Selection of services rendered:</Label>\n      <Select\n        isMulti\n        options={options}\n        className=\"basic-multi-select\"\n        classNamePrefix=\"select\"\n        closeMenuOnSelect={false}\n        hideSelectedOptions={true}\n        onChange={onChange}\n        isDisabled={!patient.id}\n        value={patient.id && patient.services}\n        components={{\n          MultiValueLabel: props => (\n            <MultiValueLabel\n              updateCountServices={updateServices}\n              patientInfo={{ ...patient }}\n              defaultProps={props}\n            />\n          ),\n        }}\n        backspaceRemovesValue={false}\n      />\n    </Fragment>\n  )\n}\n\nT.defaultProps = {\n  patient: {\n    id: '',\n    services: [],\n  },\n}\n\nT.PropTypes = {\n  updateServices: T.func.isRequired,\n  onChange: T.func.isRequired,\n  patient: T.Object,\n}\n\nexport { SelectServices }\n","import React from 'react'\nimport T from 'prop-types'\n\nimport { components } from 'react-select'\n\nconst MAX_COUNT = 19\n\nconst MenuDiagnoses = ({ defaultProps }) => {\n  const optionSelectedLength = defaultProps.getValue().length || 0\n  return (\n    <components.Menu {...defaultProps}>\n      {optionSelectedLength < MAX_COUNT ? (\n        defaultProps.children\n      ) : (\n        <div style={{ margin: 15 }}>Max limit achieved</div>\n      )}\n    </components.Menu>\n  )\n}\n\nT.defaultProps = {\n  defaultProps: {},\n}\n\nT.PropTypes = {\n  defaultProps: T.Object,\n}\n\nexport { MenuDiagnoses }\n","import React, { Fragment } from 'react'\nimport T from 'prop-types'\n\nimport Select from 'react-select'\nimport { Label } from 'reactstrap'\n\nimport { MenuDiagnoses } from '@/components/MenuDiagnoses'\n\nconst SelectDiagnoses = ({ changeDiagnoses, patient }) => {\n  const options = window.diagnosesList\n\n  return (\n    <Fragment>\n      <Label>Diagnoses:</Label>\n      <Select\n        isMulti\n        options={options}\n        className=\"basic-multi-select\"\n        classNamePrefix=\"select\"\n        closeMenuOnSelect={false}\n        hideSelectedOptions={true}\n        onChange={changeDiagnoses}\n        isDisabled={!patient.id}\n        value={patient.id && patient.diagnoses}\n        components={{\n          Menu: props => <MenuDiagnoses defaultProps={props} />,\n        }}\n      />\n    </Fragment>\n  )\n}\n\nT.defaultProps = {\n  patient: {\n    id: '',\n    diagnoses: [],\n  },\n}\n\nT.PropTypes = {\n  changeDiagnoses: T.func.isRequired,\n  patient: T.Object,\n}\n\nexport { SelectDiagnoses }\n","import docxtemplater from 'docxtemplater'\nimport DocxMerger from 'docx-merger'\nimport JSZipUtils from 'jszip-utils'\nimport JSZip from 'jszip'\nimport moment from 'moment'\n\nimport { saveAs } from 'file-saver'\n\nimport {\n  DATE_FORMAT,\n  CODE_97110,\n  CODE_97530,\n  CODE_97140,\n  CODE_98940,\n  CODE_98941,\n  CODE_98942,\n  CODE_99202,\n  CODE_99203,\n  CODE_99212,\n  CODE_99213,\n} from '../constants/api'\n\nconst newLineMapping = {\n  0: 0,\n  1: 2,\n  2: 4,\n  3: 6,\n  4: 8,\n  5: 10,\n}\n\nexport const generateFile = (pages, patient) => {\n  const listPages = [...pages]\n  const result = []\n\n  loadFile(process.env.REACT_APP_URL_DOCX, (error, content) => {\n    if (error) {\n      throw error\n    }\n\n    listPages.forEach(page => {\n      let servicesMain = page.services.filter((element, index) => index <= 5)\n      let insertData = {\n        ...patient,\n        hasGen: patient.gender === 'female',\n        hasG: patient.gender !== 'female',\n        hasH: patient.genderHolder === 'female',\n        hasEmp: !patient.isEmployment,\n        hasEmpp: patient.isEmployment,\n        hasOth: !patient.isOtherAccident,\n        hasAu: patient.isAutoAccident,\n        hasA: !patient.isAutoAccident,\n        dobPatient: moment(patient.dobPatient).format('MMDDYYYY'),\n        dobHolder: moment(patient.dobHolder).format('MMDDYYYY'),\n        accidentDate: moment(patient.accidentDate).format('MM DD YYYY'),\n        policyNumber: patient.policyNumber,\n        services: getServicesTemplate(servicesMain),\n        remain: getRemainDiagnoses(page.diagnoses),\n        ...getDiagnosesList(page.diagnoses),\n        ...getDoctorFormat(page.doctor),\n        sum_: calculateSum(servicesMain),\n        dv: moment(Date().now).format('MMDDYYYY'),\n        hasSela: patient.relastionship === 'Selа',\n        hasSpouse: patient.relastionship === 'Spouse',\n        hasChild: patient.relastionship === 'Child',\n        hasOther: patient.relastionship === 'Other',\n        ...getOfficeFormat(page.officeAddress),\n      }\n\n      if (page.services.length <= 6) {\n        insertData['nl'] = generateEmptyLine(page.services.length)\n      }\n\n      result.push(renderData(content, insertData))\n\n      if (page.services.length > 6) {\n        const servicesRemain = page.services.filter(\n          (element, index) => index > 5\n        )\n        insertData['nl'] = generateEmptyLine(servicesRemain.length)\n        insertData['services'] = getServicesTemplate(servicesRemain)\n        insertData['sum_'] = calculateSum(servicesRemain)\n        result.push(renderData(content, insertData))\n      }\n    })\n\n    var docx = new DocxMerger({}, result)\n    const dateTimeCreate = moment(Date.now()).format(DATE_FORMAT)\n    const outputName = `report_${dateTimeCreate}.docx`\n    docx.save('blob', function(data) {\n      saveAs(data, outputName)\n    })\n  })\n}\n\nconst loadFile = (url, callback) => {\n  JSZipUtils.getBinaryContent(url, callback)\n}\n\nconst renderData = (content, data) => {\n  let zip = new JSZip(content)\n  let doc = new docxtemplater().loadZip(zip)\n\n  doc.setOptions({\n    nullGetter: () => {\n      return ''\n    },\n  })\n\n  doc.setData(data)\n\n  try {\n    doc.render()\n  } catch (error) {\n    throw error\n  }\n\n  return doc.getZip().generate({ type: 'arraybuffer' })\n}\n\nconst generateEmptyLine = countLines => {\n  const result = []\n  let countLine = 6 - countLines\n  for (let j = 0; j < newLineMapping[countLine]; j++) {\n    result.push({})\n  }\n  return result\n}\n\nconst calculateSum = services => {\n  let sum = 0.0\n  services.forEach(element => {\n    sum += parseFloat(element.priceView)\n  })\n  return sum.toFixed(2)\n}\n\nconst getRemainDiagnoses = diagnoses => {\n  const remain = diagnoses.slice(12, diagnoses.length)\n  const result = []\n  remain.forEach(element => {\n    result.push(element.label)\n  })\n  return result.join()\n}\n\nconst getDiagnosesList = diagnoses => {\n  const result = {}\n  diagnoses.slice(0, 12).forEach((element, indexElement) => {\n    result[`dai_${indexElement}`] = element.value\n  })\n  return result\n}\n\nconst getDoctorFormat = doctor => {\n  return {\n    [`dN_`]: doctor.name,\n    [`npi_`]: doctor.npi,\n    [`sig_`]: doctor.signature,\n  }\n}\n\nconst getServicesTemplate = services => {\n  const result = [...services]\n  result.forEach((element, number) => {\n    if (\n      element.label === CODE_97110 &&\n      result.find(elem => elem.label === CODE_97530) !== undefined\n    ) {\n      element.pfx = '59'\n    } else if (\n      element.label === CODE_97140 &&\n      result.find(\n        elem =>\n          elem.label === CODE_98940 ||\n          elem.label === CODE_98941 ||\n          elem.label === CODE_98942\n      ) !== undefined\n    ) {\n      element.pfx = '59'\n    } else if (\n      (element.label === CODE_99202 ||\n        element.label === CODE_99203 ||\n        element.label === CODE_99212 ||\n        element.label === CODE_99213) &&\n      result.length > 1\n    ) {\n      element.pfx = '25'\n    }\n    let quantity = element.quantity === '1/2' ? 0.5 : element.quantity\n    element.priceView = (parseFloat(element.price) * quantity).toFixed(2)\n  })\n\n  return result\n}\n\nconst getOfficeFormat = office => {\n  const indexSub = office.search(/JACKSONVILLE/i)\n  return {\n    of_1: office.substr(0, indexSub),\n    of_2: office.substr(indexSub),\n  }\n}\n","export const URL_TEMPLATE = '/tag-example.docx'\nexport const MINE_TYPE =\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\nexport const DATE_FORMAT = 'YYYY_MM_DD_HH_mm_ss'\nexport const TYPE_OUTPUT = 'blob'\nexport const CODE_97110 = '97110'\nexport const CODE_97530 = '97530'\nexport const CODE_97140 = '97140'\nexport const CODE_98940 = '98940'\nexport const CODE_98941 = '98941'\nexport const CODE_98942 = '98942'\nexport const CODE_99202 = '99202'\nexport const CODE_99203 = '99203'\nexport const CODE_99212 = '99212'\nexport const CODE_99213 = '99213'\n","import React, { useState } from 'react'\nimport T from 'prop-types'\n\nimport Select from 'react-select'\nimport { Button, Form, FormGroup, Label, Input, Col, Row } from 'reactstrap'\n\nimport { SelectServices } from '@/components/SelectServices'\nimport { SelectDiagnoses } from '@/components/SelectDiagnoses'\n\nimport {\n  COUT_DAYS,\n  MIN_DAY,\n  getPatientByName,\n  getPatientIdByValue,\n  getSelectedPatients,\n  SERVICES_FIELD,\n  DIAGNOSES_FIELD,\n} from '@/constants/mainForm'\nimport { SUCCES_GENERATION } from '@/constants/app'\n\nimport { generateFile } from '@/api'\n\nimport './DoctorsAppointment.scss'\n\nconst DoctorsAppointment = props => {\n  const [idPatient, setIdPatient] = useState('')\n  const [maxDay, setMaxDay] = useState(MIN_DAY)\n  const [currentDay, setCurrentDay] = useState(MIN_DAY)\n  const [pages, setPages] = useState([])\n  const [doctor, setDoctor] = useState('')\n  const [officeAddress, setOfficeAddress] = useState('')\n  const [dateReceipt, setDateReceipt] = useState(null)\n\n  const doctorList = window.doctorList\n  const officeAddressList = window.officeAddressList\n  const { patients, updatePatient, showMesseageSuccess } = props\n\n  const selectPatientList = getSelectedPatients(patients)\n\n  const handleChangePatient = e => {\n    const patient = getPatientByName(patients, e.value)\n    const patientId = getPatientIdByValue(patients, patient)\n    setIdPatient(patientId)\n  }\n\n  const handleServicesChange = e => {\n    updatePatient(idPatient, e, SERVICES_FIELD)\n  }\n\n  const handleDiagnosesChange = e => {\n    updatePatient(idPatient, e, DIAGNOSES_FIELD)\n  }\n\n  const onSubmitForm = e => {\n    e.preventDefault()\n    const newPage = {\n      services: patients[idPatient].services,\n      diagnoses: patients[idPatient].diagnoses,\n      doctor: doctor,\n      officeAddress: officeAddress,\n      dateReceipt: dateReceipt,\n    }\n\n    pages.push(newPage)\n    setCurrentDay(currentDay + 1)\n\n    if (currentDay === maxDay) {\n      generateFile(pages, patients[idPatient])\n      setCurrentDay(MIN_DAY)\n      setPages([])\n      showMesseageSuccess(SUCCES_GENERATION)\n    }\n  }\n\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <Row form className=\"input-label\">\n        <Col>\n          <h4>Input info for {currentDay} day:</h4>\n        </Col>\n        <Col>\n          <Label>Number of pages in report file:</Label>\n          <Select\n            options={COUT_DAYS}\n            onChange={e => setMaxDay(e.value)}\n            placeholder=\"choose count days...\"\n            defaultValue={{\n              value: 1,\n              label: '1',\n            }}\n            isDisabled={currentDay !== MIN_DAY}\n          />\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Patient:</Label>\n            <Select\n              options={selectPatientList}\n              onChange={handleChangePatient}\n              isDisabled={currentDay !== MIN_DAY}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Date of Receipt:</Label>\n            <Input\n              type=\"date\"\n              placeholder=\"date of receipt...\"\n              onChange={e => setDateReceipt(e.target.value)}\n              required\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Office address:</Label>\n            <Select\n              options={officeAddressList}\n              onChange={e => setOfficeAddress(e.value)}\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <Label>Doctor:</Label>\n            <Select options={doctorList} onChange={e => setDoctor(e.value)} />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row form>\n        <Col md={6}>\n          <FormGroup>\n            <SelectDiagnoses\n              changeDiagnoses={handleDiagnosesChange}\n              patient={\n                idPatient && {\n                  id: idPatient,\n                  diagnoses: patients[idPatient].diagnoses,\n                }\n              }\n            />\n          </FormGroup>\n        </Col>\n        <Col md={6}>\n          <FormGroup>\n            <SelectServices\n              updateServices={updatePatient}\n              onChange={handleServicesChange}\n              patient={\n                idPatient && {\n                  id: idPatient,\n                  services: patients[idPatient].services,\n                }\n              }\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Button color=\"secondary\" size=\"lg\">\n        Submit\n      </Button>\n    </Form>\n  )\n}\n\nT.PropTypes = {\n  showMesseageSuccess: T.func.isRequired,\n  updatePatient: T.func.isRequired,\n  patients: T.Object,\n}\n\nexport { DoctorsAppointment }\n","import React, { useState } from 'react'\nimport T from 'prop-types'\n\nimport { TabContent, TabPane, Row, Col } from 'reactstrap'\n\nimport { NavBar } from '../NavBar'\nimport { PatientDetails } from '../PatientDetails'\nimport { DoctorsAppointment } from '../DoctorsAppointment'\n\nimport { FIRST_NAV_TAB } from '@/constants/mainForm'\n\nimport './MainForm.scss'\n\nconst MainForm = props => {\n  const [activeTab, handleToggle] = useState(FIRST_NAV_TAB)\n\n  const {\n    addPatient,\n    showMesseageSuccess,\n    showMesseageFill,\n    checkPatientName,\n    updatePatient,\n    patients,\n  } = props\n\n  return (\n    <div className=\"main-form\">\n      <h2>Medrepot-generator</h2>\n      <NavBar toggle={handleToggle} tabPosition={activeTab} />\n      <TabContent activeTab={activeTab}>\n        <TabPane tabId=\"1\">\n          <Row>\n            <Col sm=\"12\">\n              <DoctorsAppointment\n                patients={patients}\n                updatePatient={updatePatient}\n                showMesseageSuccess={showMesseageSuccess}\n              />\n            </Col>\n          </Row>\n        </TabPane>\n        <TabPane tabId=\"2\">\n          <Row>\n            <Col sm=\"12\">\n              <PatientDetails\n                addPatient={addPatient}\n                showMesseageSuccess={showMesseageSuccess}\n                showMesseageFill={showMesseageFill}\n                checkPatientName={checkPatientName}\n              />\n            </Col>\n          </Row>\n        </TabPane>\n      </TabContent>\n    </div>\n  )\n}\n\nT.PropTypes = {\n  addPatient: T.func.isRequired,\n  showMesseageSuccess: T.func.isRequired,\n  showMesseageFill: T.func.isRequired,\n  updatePatient: T.func.isRequired,\n  checkPatientName: T.func.isRequired,\n  patients: T.Object,\n}\n\nexport { MainForm }\n","import Rebase from 're-base'\nimport firebase from 'firebase'\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n}\n\nconst app = firebase.initializeApp(config)\nconst base = Rebase.createClass(app.database())\n\nexport { base }\n","import React, { Component } from 'react'\nimport { Container } from 'reactstrap'\nimport { NotificationContainer, NotificationManager } from 'react-notifications'\n\nimport { MainForm } from '@/components/MainForm'\n\nimport { base } from '@/db/base'\nimport {\n  INITIAL_STATE,\n  PATIENTS_TABLE,\n  ERROR_LABEL,\n  SUCCES_LABEL,\n  TIMEOUT_MESSAGE,\n} from '@/constants/app'\nimport { SERVICES_FIELD } from '@/constants/mainForm'\n\nimport './App.scss'\nimport 'react-notifications/lib/notifications.css'\n\nclass App extends Component {\n  state = INITIAL_STATE\n\n  componentDidMount() {\n    try {\n      this.patientsRef = base.syncState(PATIENTS_TABLE, {\n        context: this,\n        state: PATIENTS_TABLE,\n      })\n    } catch (error) {\n      throw error\n    }\n  }\n\n  addPatient = patientData => {\n    const id = Date.now()\n    this.setState(prevState => ({\n      patients: {\n        ...prevState.patients,\n        [id]: patientData,\n        diagnoses: [],\n        services: [],\n      },\n    }))\n  }\n\n  showMesseageSuccess = message => {\n    NotificationManager.success(message, SUCCES_LABEL, TIMEOUT_MESSAGE)\n  }\n\n  showMesseageFill = message => {\n    NotificationManager.error(message, ERROR_LABEL, TIMEOUT_MESSAGE)\n  }\n\n  updatePatient = (id, data, field) => {\n    const { patients } = this.state\n    const patientsList = { ...patients }\n    const selectedPatient = patientsList[id]\n    if (field === SERVICES_FIELD) {\n      selectedPatient.services = data\n    } else {\n      selectedPatient.diagnoses = data\n    }\n    patientsList[id] = selectedPatient\n    this.setState({ patients: patientsList })\n  }\n\n  checkPatientName = name => {\n    const list = Object.values(this.state.patients)\n    return list.find(patient => patient.patientName === name)\n  }\n\n  render() {\n    const { patients } = this.state\n    return (\n      <Container className=\"app\">\n        <MainForm\n          addPatient={this.addPatient}\n          showMesseageSuccess={this.showMesseageSuccess}\n          showMesseageFill={this.showMesseageFill}\n          patients={patients}\n          updatePatient={this.updatePatient}\n          checkPatientName={this.checkPatientName}\n        />\n        <NotificationContainer />\n      </Container>\n    )\n  }\n}\n\nexport { App }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport { App } from './containers/App/App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}